import { Dispatch, PropsWithChildren, SetStateAction, createContext, useState } from "react"

type Animations = Record<string, Array<{
    percentage: number
    value: unknown
}>> 

interface IAnimationContext {
    html: string
    setHtml: Dispatch<SetStateAction<string>>
    css: string
    setCss: Dispatch<SetStateAction<string>>
    time: number
    setTime: Dispatch<SetStateAction<number>>
    currentTimePercentage: number
    setCurrentTimePercentage: Dispatch<SetStateAction<number>>
    play: boolean
    setPlay: Dispatch<SetStateAction<boolean>>
    animations: Animations
    setAnimations: Dispatch<SetStateAction<Animations>>
    openAddModal: boolean
    setOpenAddModal: Dispatch<SetStateAction<boolean>>
}

export const AnimationContext = createContext<IAnimationContext>({} as IAnimationContext)

const defaultHtml = `/* Generated by: css-animator. */
<div class="element_1">
</div>
`

const defaultCss = `/* Generated by: css-animator. */
@keyframes animation_01 {}
`

export default function AnimationProvider({ children }: PropsWithChildren) {
    const [html, setHtml] = useState<string>(defaultHtml)
    const [css, setCss] = useState<string>(defaultCss)
    const [time, setTime] = useState<number>(1000)
    const [currentTimePercentage, setCurrentTimePercentage] = useState<number>(0)
    const [play, setPlay] = useState<boolean>(false)
    const [animations, setAnimations] = useState<Animations>({})
    const [openAddModal, setOpenAddModal] = useState<boolean>(false)

    return (
        <AnimationContext.Provider value={{
            html,
            setHtml,
            css,
            setCss,
            time,
            setTime,
            currentTimePercentage,
            setCurrentTimePercentage,
            play,
            setPlay,
            animations,
            setAnimations,
            openAddModal,
            setOpenAddModal,
        }}>
            {children}
        </AnimationContext.Provider>
    )
}
